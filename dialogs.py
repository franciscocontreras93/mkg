# -*- coding: utf-8 -*-
"""
/***************************************************************************
 mgtoolsDialog
                                 A QGIS plugin
 Conjunto de Herramientas para el Procesado de Información Geoestadisitica 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-11
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Francisco Contreras, GeoSIG
        email                : Francisco Contreras93@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from PyQt5.QtWidgets import *
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *
from qgis.utils import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
transform_csv_form, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gui/transform_csv_dialog.ui'))
export_csv_form, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gui/export_csv_dialog.ui'))
filter_form, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gui/filter_tda_dialog.ui'))
class_form, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gui/class_dialog.ui'))
  
        
class transformDialog(QtWidgets.QDialog, transform_csv_form):
    def __init__(self, parent=None):
        """Constructor."""
        super(transformDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.select_input_file)
        
    
    def select_input_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
            None, "Seleccionar ubicación del archivo:", "", 'Archivo Excel (*.xlsx)')
        self.lineEdit.setText(filename)
class exportDialog(QtWidgets.QDialog, export_csv_form):
    def __init__(self, parent=None):
        """Constructor."""
        super(exportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        
        self.setupUi(self)
        self.pushButton.clicked.connect(self.select_output_file)

    def select_output_file(self):
        file_name = self.comboBox.currentText()
        filename, _filter = QFileDialog.getSaveFileName(
          None, "Seleccionar ubicación del archivo:", file_name[0:4], '*.csv')
        self.lineEdit.setText(filename)
class filterDialog(QtWidgets.QDialog, filter_form):
    def __init__(self, parent=None):
        """Constructor."""
        super(filterDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        #self.pushButton.clicked.connect(self.select_output_file)
class classDialog(QtWidgets.QDialog, class_form):
    def __init__(self, parent=None):
        """Constructor."""
        super(classDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)
        #self.pushButton.clicked.connect(self.select_output_file)


        
    

